---
interface Props {
	title: string
}

const { title } = Astro.props
---

<!doctype html>
<html lang='en'>
	<head>
		<meta charset='UTF-8' />
		<meta name='description' content='Astro description' />
		<meta name='viewport' content='width=device-width' />
		<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
		<meta name='generator' content={Astro.generator} />
		<title>{title}</title>
		<meta name='view-transition' content='same-origin' />
	</head>
	<body>
		<main class='m-auto max-w-4xl'>
			<slot />
		</main>
		<footer class='m-10'>
			<p class='text-center text-gray-500 text-sm'>
				By{' '}
				<a
					href='https://github.com/emapeire'
					target='_blank'
					rel='noopener noreferrer'
					class='text-gray-500 hover:text-gray-300 transition-colors duration-200'
				>
					@emapeire
				</a>
			</p>
		</footer>
	</body>
</html>

<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: system-ui, sans-serif;
		background: #13151a;
		background-size: 224px;
		color: white;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
</style>

<script>
	window.navigation.addEventListener(
		'navigate',
		(event: {
			destination: { url: string | URL }
			intercept: (arg0: { handler(): Promise<void> }) => void
		}) => {
			const toUrl = new URL(event.destination.url)

			if (location.origin !== toUrl.origin) return

			event.intercept({
				async handler() {
					const response = await fetch(toUrl.pathname)
					const html = await response.text()
					const data = html.match(/<body[^>]*>([\s\S]*)<\/body>/i)[1]

					document.startViewTransition(() => {
						document.body.innerHTML = data
						document.documentElement.scrollTop = 0
					})
				}
			})
		}
	)
</script>
